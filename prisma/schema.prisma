generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  username                 String?
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  created_at               Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ScopesOnIssues {
  issue   Issue  @relation(fields: [issueId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  issueId String
  scope   Scope  @relation(fields: [scopeId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  scopeId String

  @@id([issueId, scopeId])
  @@index([issueId, scopeId])
}

model Scope {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?          @db.Text
  color       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  issues      ScopesOnIssues[]

  @@index([name])
  @@index([description])
}

model Issue {
  id          String           @id @default(uuid())
  title       String
  description String?          @db.Text
  scopes      ScopesOnIssues[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([title])
  @@index([description])
}

enum Role {
  USER
  ADMIN
}
