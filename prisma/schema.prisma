generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Authentication

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  created_at               Int? // Issue with GitLab Provider, check if we can remove that in a callback.
  updated_at               Int? // Issue with GitLab Provider, check if we can remove that in a callback.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product

model ScopesOnIssues {
  issue      Issue    @relation(fields: [issueId], references: [id])
  issueId    String // relation scalar field (used in the `@relation` attribute above)
  scope      Scope    @relation(fields: [scopeId], references: [id])
  scopeId    String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([issueId, scopeId])
  @@index([issueId, scopeId])
}

model Scope {
  id          String           @id @default(uuid())
  name        String           @unique
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  issues      ScopesOnIssues[]
}

model Issue {
  id          String           @id @default(uuid())
  title       String           @unique
  description String
  scopes      ScopesOnIssues[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}
